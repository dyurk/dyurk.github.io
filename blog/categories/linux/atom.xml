<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | DYURK | David Yurkiewicz]]></title>
  <link href="http://www.dyurk.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://www.dyurk.com/"/>
  <updated>2013-12-25T14:57:58-05:00</updated>
  <id>http://www.dyurk.com/</id>
  <author>
    <name><![CDATA[David Yurkiewicz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrating From WordPress to Octopress]]></title>
    <link href="http://www.dyurk.com/blog/2013/12/24/migrating-from-wordpress-to-octopress/"/>
    <updated>2013-12-24T22:45:54-05:00</updated>
    <id>http://www.dyurk.com/blog/2013/12/24/migrating-from-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<p>For some time I have looked at moving away from Wordpress for various reasons (That would be for another post!). I took a look at various platforms, many which did not met my requirements. Either they were too bloated, troublesome to manage or they lack some core features. I played around with <a href="http://jekyllrb.com/">Jekyll</a> and I liked the initial idea. But, after doing more research I found <a href="http://octopress.org/">Octopress</a> and I was quite happy with the final result.</p>

<p>Since you can host your blog from GitHub pages, my original plan was to first get a working copy running. After everything looked well, I would point my domain name to GitHub. This is how I did it&hellip;</p>

<h3>First Step: Get all data out of Wordpress</h3>


<p>This step was easy, just log-on to Wordpress' admin page and initiate an <a href="http://en.blog.wordpress.com/2006/06/12/xml-import-export/">XML export</a>. This is optional, but for the database export I decided that it would be easier to just do a MySQL dump and then do an import on my local MySQL instance.</p>

<p>All of the static files will need to be moved. If you are hosting them somewhere else you will only have to worry about the <strong>wp-content</strong> folder. This folder contains all of your plug-ins, themes, and images. In reality all we need is the images, in my case I deleted the rest except the images which were under the <em>uploads</em> folder.</p>

<h3>Install Octopress</h3>


<p>Again, this step is easy and very well <a href="http://octopress.org/docs/setup/">documented</a>. If you are hosting on GitHub you will need to create a new repository that follows the correct naming convention.</p>

<p><code>
github_username.github.io
</code></p>

<p>For example, my repo is <strong>dyurk.github.io</strong>.</p>

<h3>Importing your data to Octopress</h3>


<p>You will need to install the jekyll-import gem:
<code>bash
$ gem install jekyll-import
</code></p>

<p>In the directory where you have your <code>wordpress.xml</code> file run the following:</p>

<p>```bash
$ ruby -rubygems -e &lsquo;require &ldquo;jekyll-import&rdquo;;</p>

<pre><code>JekyllImport::Importers::WordPress.run({
  "dbname"   =&gt; "wordpress_db",
  "user"     =&gt; "user",
  "password" =&gt; "pass",
  "host"     =&gt; "localhost",
  "prefix"   =&gt; "wp_",
  "clean_entities" =&gt; true,
  "comments"       =&gt; true,
  "categories"     =&gt; true,
  "tags"           =&gt; true,
  "more_excerpt"   =&gt; true,
  "more_anchor"    =&gt; true,
  "status"         =&gt; ["publish"]
})'
</code></pre>

<p>```
This will create a <strong>_post</strong> directory. Which will need to be move to <strong>octopress/source/</strong>.</p>

<p>Keep in mind that any <code>&lt;code&gt;</code> tags will need to be replace by backticks. Any snippets or tags specific to Wordpress will most likely break formatting.</p>

<p>Finally, for the static content in the <strong>wp-content</strong> folder, I decided to move the entire directory under <strong>octopress/source/</strong>. That way I don&rsquo;t have to update the code and SEO does not take a hit.</p>

<h3>Custom domain and 404s</h3>


<p>If you own a domain that you would like to use for your GitHub hosted blog. Basically, all you need is an A record pointing to <em>204.232.175.78</em> and a file under <strong>octopress/source/</strong> name <code>CNAME</code>. In this file add your domain name like so:</p>

<p><code>console .../octopress/source/CNAME
www.dyurk.com
</code></p>

<p>To gracefully handle 404s I decided to redirect to the homepage. To add a custom 404 page just create a file under the <strong>source/</strong> directory. The file must be named <code>404.html</code>. Here is my file:</p>

<p>```html &hellip;/octopress/source/404.html
<html></p>

<pre><code>    &lt;head&gt;
    &lt;meta http-equiv="refresh" content="0; url=http://dyurk.com/" /&gt;
    &lt;/head&gt;
</code></pre>

<p><body>
</body></p>

<p></html>
```</p>

<h3>Conclusion</h3>


<p>After the DNS changes take effect the blog should be accessible via the domain name. If you are looking to customize your blog I recommend reading Octopress' documentation on the topic: <a href="http://octopress.org/docs/theme/.">http://octopress.org/docs/theme/.</a></p>

<p>As a side note, if you need to moved your working copy to a new computer or just need to re-create it, you will need to do the following:</p>

<p>Clone the <em>source</em> branch:
<code>bash
$ git clone -b source git@github.com:username/username.github.io.git octopress
</code>
Bundle install and setup GitHub pages:
<code>bash
$ gem install bundler
$ sudo gem install bundler
$ rbenv rehash &amp;&amp; bundle install &amp;&amp; rake setup_github_pages
</code>
Now fetch the master branch:
<code>bash
$ cd _deploy
$ git fetch —all
$ git reset --hard origin/master
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Confluence XML Import Issues]]></title>
    <link href="http://www.dyurk.com/blog/2013/03/26/confluence-xml-import-issues/"/>
    <updated>2013-03-26T13:35:01-04:00</updated>
    <id>http://www.dyurk.com/blog/2013/03/26/confluence-xml-import-issues</id>
    <content type="html"><![CDATA[<p>Find the class that the import is having issues with. For this example ContentPermission is the problem.</p>

<pre class="prettyprint">Error while importing backup: not-null property references a null or transient value: com.atlassian.confluence.security.ContentPermission.owningSet
Caused by: net.sf.hibernate.PropertyValueException: not-null property references a null or transient value: com.atlassian.confluence.security.ContentPermission.owningSet</pre>


<p>Delete all ContentPermission entries from the XML file &ndash; this will remove all unnecessary/unsupported classes and will allow the import to continue. Open the zip file and edit entities.xml</p>

<br>


<p>Search for <code>&lt;object class="ContentPermission"...&gt;</code> You will see <code>&lt;object&gt;</code> entries like this:</p>

<p>```xml</p>

<object class="ContentPermission" package="com.atlassian.confluence.security">
<id name="id">17072133</id>
<property name="type">&lt;![CDATA[View]]&gt;</property>
<property name="userName">&lt;![CDATA[corporatetrainer]]&gt;</property>
<property name="groupName"/><property name="owningSet" class="ContentPermissionSet" package="com.atlassian.confluence.security"><id name="id">17039363</id>
</property>
<property name="creatorName">&lt;![CDATA[corporatetrainer]]&gt;</property>
<property name="creationDate">2011-05-19 10:22:05.000</property>
<property name="lastModifierName">&lt;![CDATA[corporatetrainer]]&gt;</property>
<property name="lastModificationDate">2011-05-19 10:22:05.000</property>
</object>


<p>```</p>

<p>Helpful on-liner to remove the entries from entities.xml</p>

<p><code>bash
$ sed -i '/&lt;object class="ContentPermission"/,/&lt;\/object&gt;/d' entities.xml
</code></p>

<p>Make sure there are no syntax errors that will cause the import to fail</p>

<pre>xmllint --noout entities.xml</pre>


<p>Retry the import and Good Luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Temporarily Disable Puppet]]></title>
    <link href="http://www.dyurk.com/blog/2013/02/20/temporarily-disable-puppet/"/>
    <updated>2013-02-20T21:26:26-05:00</updated>
    <id>http://www.dyurk.com/blog/2013/02/20/temporarily-disable-puppet</id>
    <content type="html"><![CDATA[<p>This is can be done by an admin disabled of Puppet</p>

<pre># puppet agent --disable "Reason why disabled"</pre>


<p>To make sure it&rsquo;s disable, just do a Puppet run;</p>

<pre># puppet agent -t
 Notice: Skipping run of Puppet configuration client; administratively disabled (Reason: 'Testing some new things');
 Use 'puppet agent --enable' to re-enable.</pre>


<p>To enable:</p>

<pre>puppet agent --enable</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Confluence Backup Errors]]></title>
    <link href="http://www.dyurk.com/blog/2013/02/20/confluence-backup-errors/"/>
    <updated>2013-02-20T15:17:32-05:00</updated>
    <id>http://www.dyurk.com/blog/2013/02/20/confluence-backup-errors</id>
    <content type="html"><![CDATA[<pre>The following error(s) occurred:
com.atlassian.confluence.importexport.ImportExportException: Couldn't backup database data. at com.atlassian.confluence.importexport.impl.AbstractXmlExporter.backupEntities(AbstractXmlExporter.java:197) at com.atlassian.confluence.importexport.impl.AbstractXmlExporter.backupEverything(AbstractXmlExporter.java:99) at com.atlassian.confluence.importexport.impl.FileXmlExporter.backupEverything(FileXmlExporter.java:76)</pre>


<p>Java is running out of memory.</p>

<p>To increase heap or perm gen space memory in Linux installations,</p>

<p>Edit $CONFLUENCE_HOME/bin/setenv.sh</p>

<p>Find the section <code>JAVA_OPTS="-Xms256m -Xmx512m -XX:MaxPermSize=256m</code> and set accordingly.  Xmx is maximum, Xms is minimum, and MaxPermSize is PermGen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 1.8.x on CentOS]]></title>
    <link href="http://www.dyurk.com/blog/2013/02/08/git-1-8-x-on-centos/"/>
    <updated>2013-02-08T17:16:13-05:00</updated>
    <id>http://www.dyurk.com/blog/2013/02/08/git-1-8-x-on-centos</id>
    <content type="html"><![CDATA[<p>At the moment this is not on EPEL &amp; CentOS repo, you&rsquo;ll have to compile from source.</p>

<p>Get the desired version: <a href="http://code.google.com/p/git-core/downloads/list"><a href="http://code.google.com/p/git-core/downloads/list">http://code.google.com/p/git-core/downloads/list</a></a></p>

<pre>tar -xzvf ./git-1.8.x.tar.gz</pre>


<pre>cd ./git-1.8.x</pre>


<pre id="crayon-51152fba206b0-5">./configure</pre>


<pre id="crayon-51152fba206b0-6">make &amp;&amp; make install</pre>

]]></content>
  </entry>
  
</feed>
