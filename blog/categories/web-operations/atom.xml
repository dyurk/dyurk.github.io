<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web operations | DYURK]]></title>
  <link href="http://www.dyurk.com/blog/categories/web-operations/atom.xml" rel="self"/>
  <link href="http://www.dyurk.com/"/>
  <updated>2015-06-24T22:14:52-04:00</updated>
  <id>http://www.dyurk.com/</id>
  <author>
    <name><![CDATA[DYURK]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[splogTASH - SPL to Lucene translator]]></title>
    <link href="http://www.dyurk.com/blog/2015/02/08/splogtash-a-simple-spl-search-processing-language-to-lucene-translator/"/>
    <updated>2015-02-08T12:59:41-05:00</updated>
    <id>http://www.dyurk.com/blog/2015/02/08/splogtash-a-simple-spl-search-processing-language-to-lucene-translator</id>
    <content type="html"><![CDATA[<p>Recently I took part in the migration of Splunk over to ELK (Elastic Search/Logstash/Kibana). One of the main road-blocks with this migration was the syntax changes that were introduce since the query language was different in the new system.</p>

<p>Splunk uses a proprietary language called &ldquo;search processing language&rdquo; or SPL for short. Kibana and the ELK stack make use of Apache Lucene. These two languages are not difficult by themselves, but converting queries over from SPL to Lucene is not always a trivial task.</p>

<p>I wanted to find an easy way of converting Splunk queries over to Lucene, so I started working on a translator.</p>

<h3>What is splogTASH?</h3>


<p><img src="https://raw.githubusercontent.com/dyurk/splogtash/master/public/splogstash_screenshot.png"></p>

<p>splogTASH is a <a href="http://www.sinatrarb.com/">Sinatra</a> application that translates queries depending on the definitions provided. The main definitions are stored in a JSON formatted file <a href="https://github.com/dyurk/splogTASH/blob/master/helpers/lucene.json"><code>/helpers/lucene.json</code></a>.</p>

<p>```json ../helpers/lucene.json
{</p>

<pre><code>"lucene": {
    "/data/syslog/current/web/info.log": "web_info_log AND",
    "/data/syslog/current/web/access.log": "web_access_log AND",
    "/data/syslog/current/web/error.log": "web_error_log AND",
    "source=": "type:",
    "uri=": "request_uri:",
    "uri_path=": "request_uri:",
    "http_response=": "reponse:",
    "=": ":"
},
"pre_lucene": {
    "| where eventcount &gt;": "min_doc_count:",
    "transaction ": " agg:terms field:",
    "stats count by ": " agg:stats field:"
    }
</code></pre>

<p>}
```</p>

<p>As you can see there are two objects in the schema, <em>lucene</em> and <em>pre_lucene</em>. Since splogTASH takes the whole inputed query and tokenizes each matching term, I added <em>pre_lucene</em> to easily convert before tokenizations. This comes in handy when dealing with complex queries that do aggregations for example.</p>

<p>Under the <em>lucene</em> object we see an example for a web info log:</p>

<p><code>json
"/data/syslog/current/web/info.log": "web_info_log AND"
</code>
Here we are saying that any time we match <strong>&ldquo;/data/syslog/current/web/info.log&rdquo;</strong>, we want <strong>&ldquo;web_info_log AND&rdquo;</strong> in return. It&rsquo;s as simple as that, to add your own definitions follow the patter of &ldquo;term&rdquo; : &ldquo;definition&rdquo;.</p>

<p>Lastly, I would like to point out the main splogtash.rb file (line 39-48):</p>

<p>``` ruby ../splogtash.rb <a href="https://github.com/dyurk/splogTASH/blob/master/splogtash.rb#L31-L50">https://github.com/dyurk/splogTASH/blob/master/splogtash.rb#L31-L50</a></p>

<pre><code>    # post processing
    inputs.split.each do |query|
      queries &lt;&lt; query
    end
    queries.each do |q|
      temp_var = String.new
      temp_var = q.dup
      lucene.each {|f, u| temp_var.gsub!(f, u)}
      case temp_var
      when /AND/
           temp_var = temp_var.delete('"')
      when /!/
           temp_var = temp_var.delete("!").insert(0, "-")
      when /\//
           temp_var = temp_var.gsub!("/","\\\/")
      end
      lucenyze &lt;&lt; temp_var
    end
    rtg &lt;&lt; lucenyze.join(' ')
    return rtg
  end
</code></pre>

<p>```
In the post-processing section there is a case statement which handles global translations. In this example I&rsquo;m cleaning the query by escaping &ldquo;/&rdquo; and also replacing &ldquo;!&rdquo; with &ldquo;&ndash;&rdquo; (exclusions).</p>

<p>After a query has been converted we can then click on the translated query to test on Kibana. You might be interested in customizing the URL to best fit you. Look at <code>../views/search.erb</code>, replace &ldquo;kibana.initech.com&rdquo;.</p>

<p>``` html ../views/search.erb <a href="https://github.com/dyurk/splogTASH/blob/master/views/search.erb#L9">https://github.com/dyurk/splogTASH/blob/master/views/search.erb#L9</a></p>

<div class="panel panel-success">
  <div class="panel-body">
<pre> <a href="https://kibana.initech.com/#/dashboard/file/logstash.json?from=5m&query=<%= h @escaped_input %>"><%= @input %></a></pre>
  </div>
</div>


<p>```</p>

<h3>Try it yourself!</h3>


<p>It&rsquo;s real simple to get started. The source can be found on my GitHub page: <a href="https://github.com/dyurk/splogTASH">https://github.com/dyurk/splogTASH</a></p>

<p><code>bash
$ git clone git@github.com:dyurk/splogTASH.git
$ cd splogTASH/ &amp;&amp; rackup -p 8080
</code></p>

<p>Now go to <a href="http://localhost:8080">http://localhost:8080</a></p>

<p><em>Patches welcome!! </em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating from WordPress to Octopress]]></title>
    <link href="http://www.dyurk.com/blog/2013/12/24/migrating-from-wordpress-to-octopress/"/>
    <updated>2013-12-24T22:45:54-05:00</updated>
    <id>http://www.dyurk.com/blog/2013/12/24/migrating-from-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<p>For some time I have looked at moving away from Wordpress for numerous reasons (That would be for another post!). I took a look at various platforms, but most fell short of expectations. Either they were too bloated, troublesome to manage or they lack some core features. I played around with <a href="http://jekyllrb.com/">Jekyll</a> and I liked the initial idea. But, after doing more research I found <a href="http://octopress.org/">Octopress</a> and I was quite happy with the final result.</p>

<p>Since you can host your blog from GitHub pages, my original plan was to first get a working copy running. After everything looked well, I would point my domain name to GitHub. This is how I did it&hellip;</p>

<h3>First Step: Get all data out of Wordpress</h3>


<p>This step was easy, just log-on to Wordpress' admin page and initiate an <a href="http://en.blog.wordpress.com/2006/06/12/xml-import-export/">XML export</a>. This is optional, but for the database export I decided that it would be easier to just do a MySQL dump and then do an import on my local MySQL instance.</p>

<p>All of the static files will need to be moved. If you are hosting them somewhere else you will only have to worry about the <strong>wp-content</strong> folder. This folder contains all of your plug-ins, themes, and images. In reality all we need is the images, in my case I deleted the rest except the images which were under the <em>uploads</em> folder.</p>

<h3>Install Octopress</h3>


<p>Again, this step is easy and very well <a href="http://octopress.org/docs/setup/">documented</a>. If you are hosting on GitHub you will need to create a new repository that follows the correct naming convention.</p>

<p><code>
github_username.github.io
</code></p>

<p>For example, my repo is <strong>dyurk.github.io</strong>.</p>

<h3>Importing your data to Octopress</h3>


<p>You will need to install the jekyll-import gem:
<code>bash
$ gem install jekyll-import
</code></p>

<p>In the directory where you have your <code>wordpress.xml</code> file run the following:</p>

<p>```bash
$ ruby -rubygems -e &lsquo;require &ldquo;jekyll-import&rdquo;;</p>

<pre><code>JekyllImport::Importers::WordPress.run({
  "dbname"   =&gt; "wordpress_db",
  "user"     =&gt; "user",
  "password" =&gt; "pass",
  "host"     =&gt; "localhost",
  "prefix"   =&gt; "wp_",
  "clean_entities" =&gt; true,
  "comments"       =&gt; true,
  "categories"     =&gt; true,
  "tags"           =&gt; true,
  "more_excerpt"   =&gt; true,
  "more_anchor"    =&gt; true,
  "status"         =&gt; ["publish"]
})'
</code></pre>

<p>```
This will create a <strong>_post</strong> directory. Which will need to be move to <strong>octopress/source/</strong>.</p>

<p>Keep in mind that any <code>&lt;code&gt;</code> tags will need to be replace by backticks. Any snippets or tags specific to Wordpress will most likely break formatting.</p>

<p>Finally, for the static content in the <strong>wp-content</strong> folder, I decided to move the entire directory under <strong>octopress/source/</strong>. That way I don&rsquo;t have to update the code and SEO does not take a hit.</p>

<h3>Custom domain and 404s</h3>


<p>If you own a domain that you would like to use for your GitHub hosted blog. Basically, all you need is an A record pointing to <em>204.232.175.78</em> and a file under <strong>octopress/source/</strong> name <code>CNAME</code>. In this file add your domain name like so:</p>

<p><code>console .../octopress/source/CNAME
www.dyurk.com
</code></p>

<p>To gracefully handle 404s I decided to redirect to the homepage. To add a custom 404 page just create a file under the <strong>source/</strong> directory. The file must be named <code>404.html</code>. Here is my file:</p>

<p>```html &hellip;/octopress/source/404.html
<html></p>

<pre><code>    &lt;head&gt;
    &lt;meta http-equiv="refresh" content="0; url=http://dyurk.com/" /&gt;
    &lt;/head&gt;
</code></pre>

<p><body>
</body></p>

<p></html>
```</p>

<h3>Conclusion</h3>


<p>After the DNS changes take effect the blog should be accessible via the domain name. If you are looking to customize your blog I recommend reading Octopress' documentation on the topic: <a href="http://octopress.org/docs/theme/.">http://octopress.org/docs/theme/.</a></p>

<p>As a side note, if you need to moved your working copy to a new computer or just need to re-create it, you will need to do the following:</p>

<p>Clone the <em>source</em> branch:
<code>bash
$ git clone -b source git@github.com:username/username.github.io.git octopress
</code>
Bundle install and setup GitHub pages:
<code>bash
$ gem install bundler
$ sudo gem install bundler
$ rbenv rehash &amp;&amp; bundle install &amp;&amp; rake setup_github_pages
</code>
Now fetch the master branch:
<code>bash
$ cd _deploy
$ git fetch —all
$ git reset --hard origin/master
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Confluence XML Import Issues]]></title>
    <link href="http://www.dyurk.com/blog/2013/03/26/confluence-xml-import-issues/"/>
    <updated>2013-03-26T13:35:01-04:00</updated>
    <id>http://www.dyurk.com/blog/2013/03/26/confluence-xml-import-issues</id>
    <content type="html"><![CDATA[<p>Find the class that the import is having issues with. For this example ContentPermission is the problem.</p>

<pre class="prettyprint">Error while importing backup: not-null property references a null or transient value: com.atlassian.confluence.security.ContentPermission.owningSet
Caused by: net.sf.hibernate.PropertyValueException: not-null property references a null or transient value: com.atlassian.confluence.security.ContentPermission.owningSet</pre>


<p>Delete all ContentPermission entries from the XML file &ndash; this will remove all unnecessary/unsupported classes and will allow the import to continue. Open the zip file and edit entities.xml</p>

<br>


<p>Search for <code>&lt;object class="ContentPermission"...&gt;</code> You will see <code>&lt;object&gt;</code> entries like this:</p>

<p>```xml</p>

<object class="ContentPermission" package="com.atlassian.confluence.security">
<id name="id">17072133</id>
<property name="type">&lt;![CDATA[View]]&gt;</property>
<property name="userName">&lt;![CDATA[corporatetrainer]]&gt;</property>
<property name="groupName"/><property name="owningSet" class="ContentPermissionSet" package="com.atlassian.confluence.security"><id name="id">17039363</id>
</property>
<property name="creatorName">&lt;![CDATA[corporatetrainer]]&gt;</property>
<property name="creationDate">2011-05-19 10:22:05.000</property>
<property name="lastModifierName">&lt;![CDATA[corporatetrainer]]&gt;</property>
<property name="lastModificationDate">2011-05-19 10:22:05.000</property>
</object>


<p>```</p>

<p>Helpful on-liner to remove the entries from entities.xml</p>

<p><code>bash
$ sed -i '/&lt;object class="ContentPermission"/,/&lt;\/object&gt;/d' entities.xml
</code></p>

<p>Make sure there are no syntax errors that will cause the import to fail</p>

<pre>xmllint --noout entities.xml</pre>


<p>Retry the import and Good Luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Proxy Example]]></title>
    <link href="http://www.dyurk.com/blog/2013/03/12/apache-proxy-example/"/>
    <updated>2013-03-12T16:58:56-04:00</updated>
    <id>http://www.dyurk.com/blog/2013/03/12/apache-proxy-example</id>
    <content type="html"><![CDATA[<p>Apache proxy example for web app running on myapp.website.com on port 7990.</p>

<p>```apacheconf
<VirtualHost *:80></p>

<pre><code>    ServerName myapp.website.com
    ProxyRequests Off

    &lt;Proxy *&gt;
            Order deny,allow
            Allow from all
    &lt;/Proxy&gt;

            # Logging
    LogFormat "%h %l %u %t \"%r\" %&gt;s %b" common
    CustomLog logs/access_log common


    ProxyTimeout    7200
    ProxyPreserveHost On
    ProxyPass           /       http://localhost:7990/
    ProxyPassReverse    /       http://localhost:7990/
    ProxyTimeout     86400
</code></pre>

<p></VirtualHost></p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cisco Catalyst 2960 - Notes]]></title>
    <link href="http://www.dyurk.com/blog/2013/03/06/cisco-catalyst-2960-notes/"/>
    <updated>2013-03-06T03:07:46-05:00</updated>
    <id>http://www.dyurk.com/blog/2013/03/06/cisco-catalyst-2960-notes</id>
    <content type="html"><![CDATA[<h2>VLAN</h2>


<h3>Creating VLANs</h3>


<p>Show all VLANs on switch</p>

<pre>&gt; sh vlan</pre>


<p>Now, Let&rsquo;s begin. Enter global configuration mode</p>

<pre># config t</pre>


<p>Enter a VLAN ID</p>

<pre># vlan 5</pre>


<p>Provide a name for the VLAN</p>

<pre># name myvlan</pre>


<p>Exit config</p>

<pre># end</pre>


<h3>Assigning Ports to a VLAN</h3>


<p>Enter global configuration mode</p>

<pre># config t</pre>


<p>Select the interface (port). Naming convention: Switch# / Port</p>

<p>e.g Switch 1 port 19</p>

<pre># interface Gi1/0/19</pre>


<p>Define the VLAN membership mode for the port (Layer 2 access port).</p>

<pre># switchport mode access</pre>


<p>Assign the port to a VLAN</p>

<pre># switchport access vlan 5</pre>


<p>Exit config</p>

<pre># end</pre>


<h2><a id="more"></a><a id="more-694"></a></h2>


<h2>Back up and Restore Configuration Files</h2>


<h3>TFTP Back up</h3>


<p>To back up the current configuration, enter Privilege Mode then type the following:</p>

<pre>#copy running-config tftp:</pre>


<p>You will then be prompt to provided the address of the tftp server &amp; the filename. Here is an example:</p>

<pre>Address or name of remote host []? 102.10.15.44
 Destination filename [mco-confg]? name_of_config_file
 !!
 1030 bytes copied in 2.489 secs (395 bytes/sec)</pre>


<h3>TFTP Restore</h3>


<p>To restore a configuration from a tftp server, first enter Privilege Mode then type the following:</p>

<pre>#copy tftp: running-config</pre>


<p>You will then be prompt to provided the address of the tftp server &amp; the filename. Here is an example:</p>

<pre>Address or name of remote host []? 102.10.15.44
 Source filename []? backup_cfg_for_my_router
 Destination filename [running-config]?
 Accessing tftp://102.10.15.1/backup_cfg_for_my_router...
 Loading backup_cfg_for_router from 102.10.15.44 (via FastEthernet0/0): !
 [OK - 1030 bytes]</pre>

]]></content>
  </entry>
  
</feed>
